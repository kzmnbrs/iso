// Code generated by qtc from "currency.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line templates/currency.qtpl:1
package templates

//line templates/currency.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/currency.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/currency.qtpl:2
type CurrencyOptions struct {
	Codes []string
}

//line templates/currency.qtpl:7
func StreamCurrency(qw422016 *qt422016.Writer, opts *CurrencyOptions) {
//line templates/currency.qtpl:7
	qw422016.N().S(`
// Code generated from iso/gen. DO NOT EDIT.

package iso

import (
    "database/sql/driver"
    "errors"
)

type (
    Currency uint8
    NullCurrency struct {
        Valid bool
        Currency Currency
    }
)

const (
    _ Currency = iota
`)
//line templates/currency.qtpl:27
	for _, code := range opts.Codes {
//line templates/currency.qtpl:27
		qw422016.N().S(`    Currency`)
//line templates/currency.qtpl:28
		qw422016.N().S(code)
//line templates/currency.qtpl:28
		qw422016.N().S(`
`)
//line templates/currency.qtpl:29
	}
//line templates/currency.qtpl:29
	qw422016.N().S(`)

var ErrBadCurrency = errors.New("bad currency")

var currencyToCode = map[Currency]string{
`)
//line templates/currency.qtpl:35
	for _, code := range opts.Codes {
//line templates/currency.qtpl:35
		qw422016.N().S(`    Currency`)
//line templates/currency.qtpl:36
		qw422016.N().S(code)
//line templates/currency.qtpl:36
		qw422016.N().S(`: "`)
//line templates/currency.qtpl:36
		qw422016.N().S(code)
//line templates/currency.qtpl:36
		qw422016.N().S(`",
`)
//line templates/currency.qtpl:37
	}
//line templates/currency.qtpl:37
	qw422016.N().S(`}

var codeToCurrency = map[string]Currency{
`)
//line templates/currency.qtpl:41
	for _, code := range opts.Codes {
//line templates/currency.qtpl:41
		qw422016.N().S(`    "`)
//line templates/currency.qtpl:42
		qw422016.N().S(code)
//line templates/currency.qtpl:42
		qw422016.N().S(`": Currency`)
//line templates/currency.qtpl:42
		qw422016.N().S(code)
//line templates/currency.qtpl:42
		qw422016.N().S(`,
`)
//line templates/currency.qtpl:43
	}
//line templates/currency.qtpl:43
	qw422016.N().S(`}

func CurrencyFromCode(v string) Currency {
    return codeToCurrency[v]
}

func AppendCurrencies(dst []Currency) []Currency {
`)
//line templates/currency.qtpl:51
	for _, code := range opts.Codes {
//line templates/currency.qtpl:51
		qw422016.N().S(`    dst = append(dst, Currency`)
//line templates/currency.qtpl:52
		qw422016.N().S(code)
//line templates/currency.qtpl:52
		qw422016.N().S(`)
`)
//line templates/currency.qtpl:53
	}
//line templates/currency.qtpl:53
	qw422016.N().S(`    return dst
}

func (v Currency) String() string {
	return currencyToCode[v]
}

func (v Currency) IsValid() bool {
    return v.String() != ""
}

func (v Currency) MarshalText() ([]byte, error) {
	code := v.String()
	if len(code) == 0 {
		return nil, ErrBadCurrency
	}
	return s2b(code), nil
}

func (v *Currency) UnmarshalText(bb []byte) error {
	v1, found := codeToCurrency[b2s(bb)]
	if !found {
		return ErrBadCurrency
	}
	*v = v1
	return nil
}

func (v *Currency) UnmarshalJSON(bb []byte) error {
	if len(bb) < 2 {
		return ErrBadCurrency
	}
	return v.UnmarshalText(unquote(bb))
}

func (v Currency) Value() (driver.Value, error) {
	return v.String(), nil
}

func (v *Currency) Scan(v1 interface{}) error {
	switch x := v1.(type) {
	case string:
		return v.UnmarshalText(s2b(x))
	case []byte:
		return v.UnmarshalText(x)
	}
	return ErrBadCurrency
}

func (nv *NullCurrency) UnmarshalJSON(bb []byte) error {
    if isJsonNull(bb) {
        nv.Valid = false
        return nil
    }

    v := Currency(0)
    if err := v.UnmarshalJSON(bb); err != nil {
        nv.Valid = false
        return err
    }

    nv.Currency = v
    nv.Valid = true
    return nil
}

func (nv *NullCurrency) Scan(v1 interface{}) error {
    if v1 == nil {
        nv.Valid = false
        return nil
    }

    v := Currency(0)
    if err := v.Scan(v1); err != nil {
        nv.Valid = false
        return err
    }

    nv.Currency = v
    nv.Valid = true
    return nil
}
`)
//line templates/currency.qtpl:136
}

//line templates/currency.qtpl:136
func WriteCurrency(qq422016 qtio422016.Writer, opts *CurrencyOptions) {
//line templates/currency.qtpl:136
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/currency.qtpl:136
	StreamCurrency(qw422016, opts)
//line templates/currency.qtpl:136
	qt422016.ReleaseWriter(qw422016)
//line templates/currency.qtpl:136
}

//line templates/currency.qtpl:136
func Currency(opts *CurrencyOptions) string {
//line templates/currency.qtpl:136
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/currency.qtpl:136
	WriteCurrency(qb422016, opts)
//line templates/currency.qtpl:136
	qs422016 := string(qb422016.B)
//line templates/currency.qtpl:136
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/currency.qtpl:136
	return qs422016
//line templates/currency.qtpl:136
}

//line templates/currency.qtpl:138
func StreamCurrencySQL(qw422016 *qt422016.Writer, opts *CurrencyOptions) {
//line templates/currency.qtpl:138
	qw422016.N().S(`CREATE TYPE iso_currency AS ENUM (
`)
//line templates/currency.qtpl:140
	for i, code := range opts.Codes {
//line templates/currency.qtpl:140
		qw422016.N().S(`    '`)
//line templates/currency.qtpl:141
		qw422016.N().S(code)
//line templates/currency.qtpl:141
		qw422016.N().S(`'`)
//line templates/currency.qtpl:141
		if i != len(opts.Codes)-1 {
//line templates/currency.qtpl:141
			qw422016.N().S(`,`)
//line templates/currency.qtpl:141
		}
//line templates/currency.qtpl:141
		qw422016.N().S(`
`)
//line templates/currency.qtpl:142
	}
//line templates/currency.qtpl:142
	qw422016.N().S(`)
`)
//line templates/currency.qtpl:144
}

//line templates/currency.qtpl:144
func WriteCurrencySQL(qq422016 qtio422016.Writer, opts *CurrencyOptions) {
//line templates/currency.qtpl:144
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/currency.qtpl:144
	StreamCurrencySQL(qw422016, opts)
//line templates/currency.qtpl:144
	qt422016.ReleaseWriter(qw422016)
//line templates/currency.qtpl:144
}

//line templates/currency.qtpl:144
func CurrencySQL(opts *CurrencyOptions) string {
//line templates/currency.qtpl:144
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/currency.qtpl:144
	WriteCurrencySQL(qb422016, opts)
//line templates/currency.qtpl:144
	qs422016 := string(qb422016.B)
//line templates/currency.qtpl:144
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/currency.qtpl:144
	return qs422016
//line templates/currency.qtpl:144
}
